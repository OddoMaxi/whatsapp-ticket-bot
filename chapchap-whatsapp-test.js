/**
 * Fichier de test pour l'int√©gration de ChapChap Pay avec WhatsApp
 * Ce code montre comment int√©grer le paiement avant la g√©n√©ration des tickets
 */

// Structure propos√©e pour le gestionnaire de messages WhatsApp
function processMessage(userMessage, from, userStates) {
  const state = userStates[from] || { step: 'init' };
  let response = '';

  // Exemple de code √† int√©grer dans votre gestionnaire de messages (index.js)
  // Ce code s'ins√®re dans la condition qui traite la r√©ponse "oui" pour la confirmation
  if (state.step === 'confirm' && /^oui$/i.test(userMessage)) {
    try {
      // 1. Importer le service ChapChap Pay
      const chapchapPay = require('./services/chapchap-pay');
      
      // 2. R√©cup√©rer les informations de l'√©v√©nement et de la cat√©gorie
      const Database = require('better-sqlite3');
      const db = new Database(__dirname + '/data.sqlite');
      
      const event = db.prepare('SELECT * FROM events WHERE id=?').get(state.event.id);
      
      if (!event) {
        return { 
          response: 'Erreur : √©v√©nement introuvable.', 
          newState: { step: 'init' } 
        };
      }
      
      let cats = JSON.parse(event.categories);
      let catIdx = cats.findIndex(c => c.name === state.category.name);
      let cat = cats[catIdx];
      
      if (!cat) {
        return { 
          response: 'Erreur : cat√©gorie introuvable.', 
          newState: { step: 'init' } 
        };
      }
      
      if ((cat.quantite || cat.quantity) < state.quantity) {
        return { 
          response: `D√©sol√©, il ne reste que ${cat.quantite || cat.quantity} places pour cette cat√©gorie.`,
          // On reste √† l'√©tape de quantit√©
          newState: state 
        };
      }
      
      // 3. G√©n√©rer une r√©f√©rence unique pour ce paiement
      const prix = cat.prix || cat.price;
      const totalPrice = prix * state.quantity;
      const reference = chapchapPay.generateTransactionId();
      
      // 4. Pr√©parer les donn√©es de paiement
      const paymentData = {
        amount: totalPrice,
        description: `Achat de ${state.quantity} ticket(s) pour ${event.name} - ${cat.name}`,
        reference: reference
      };
      
      console.log('Donn√©es de paiement:', JSON.stringify(paymentData));
      
      // 5. Mettre √† jour l'√©tat de l'utilisateur
      const newState = {
        ...state,
        step: 'payment_pending',
        paymentReference: reference,
        totalPrice: totalPrice,
        paymentCreatedAt: Date.now()
      };
      
      // 6. G√©n√©rer le lien de paiement (asynchrone)
      chapchapPay.generatePaymentLink(paymentData)
        .then(paymentResponse => {
          console.log('R√©ponse ChapChap Pay:', JSON.stringify(paymentResponse));
          
          // Stocker l'URL de paiement dans l'√©tat de l'utilisateur
          userStates[from] = {
            ...newState,
            paymentUrl: paymentResponse.payment_url
          };
          
          // Envoyer le lien de paiement √† l'utilisateur
          sendMessage(from, 
            `üí∏ Votre lien de paiement est pr√™t !\n\n` +
            `üí∞ Montant : ${paymentResponse.payment_amount_formatted}\n` +
            `üÜî R√©f√©rence : ${reference}\n\n` +
            `‚≠ê Cliquez sur ce lien pour proc√©der au paiement :\n${paymentResponse.payment_url}\n\n` +
            `‚ùï Apr√®s avoir effectu√© le paiement, envoyez "VERIFY" pour v√©rifier votre paiement et g√©n√©rer vos tickets.`
          );
        })
        .catch(error => {
          console.error('Erreur lors de la g√©n√©ration du lien de paiement:', error);
          sendMessage(from, 'Une erreur est survenue lors de la g√©n√©ration du lien de paiement. Veuillez r√©essayer plus tard.');
          userStates[from] = { step: 'init' };
        });
      
      // 7. R√©ponse imm√©diate en attendant l'API
      return {
        response: 'G√©n√©ration de votre lien de paiement en cours... Veuillez patienter quelques instants.',
        newState: newState
      };
    } catch (error) {
      console.error('Erreur dans le processus de paiement:', error);
      return {
        response: 'Une erreur est survenue. Veuillez r√©essayer plus tard.',
        newState: { step: 'init' }
      };
    }
  }
  
  // Gestion de la v√©rification du paiement
  else if (state.step === 'payment_pending' && /^verify$/i.test(userMessage)) {
    try {
      // Importer le service ChapChap Pay
      const chapchapPay = require('./services/chapchap-pay');
      
      if (!state.paymentReference) {
        return {
          response: 'Aucune r√©f√©rence de paiement trouv√©e. Veuillez recommencer l\'achat.',
          newState: { step: 'init' }
        };
      }
      
      // Message imm√©diat (la v√©rification se fera en asynchrone)
      const immediateResponse = 'V√©rification de votre paiement en cours... Veuillez patienter quelques instants.';
      
      // V√©rifier le statut du paiement (asynchrone)
      chapchapPay.checkPaymentStatus(state.paymentReference)
        .then(paymentStatus => {
          console.log('Statut de paiement:', JSON.stringify(paymentStatus));
          
          if (paymentStatus.status === 'completed' || paymentStatus.status === 'paid') {
            // Paiement r√©ussi, proc√©der √† la g√©n√©ration des tickets
            processSuccessfulPayment(from, state, paymentStatus);
          } else {
            // Paiement non r√©ussi ou en attente
            sendMessage(from, 
              `Le paiement n'est pas encore confirm√©. Statut actuel: ${paymentStatus.status}.\n` +
              `Veuillez finaliser votre paiement puis envoyer "VERIFY" pour v√©rifier √† nouveau.`
            );
          }
        })
        .catch(error => {
          console.error('Erreur lors de la v√©rification du statut de paiement:', error);
          sendMessage(from, 
            'Une erreur est survenue lors de la v√©rification de votre paiement. ' +
            'Veuillez r√©essayer plus tard en envoyant "VERIFY".'
          );
        });
      
      // R√©ponse imm√©diate pendant que le processus asynchrone se d√©roule
      return {
        response: immediateResponse,
        newState: state // Garder le m√™me √©tat, car on attend la confirmation
      };
    } catch (error) {
      console.error('Erreur dans le processus de v√©rification de paiement:', error);
      return {
        response: 'Une erreur est survenue. Veuillez r√©essayer plus tard.',
        newState: state // Conserver l'√©tat payment_pending pour permettre une nouvelle tentative
      };
    }
  }
  
  // Autres √©tapes de votre chatbot...
  return { response, newState: state };
}

/**
 * Cette fonction sera appel√©e uniquement si le paiement est confirm√©
 * Elle g√©n√®re les tickets et met √† jour le stock
 */
async function processSuccessfulPayment(from, state, paymentStatus) {
  try {
    const Database = require('better-sqlite3');
    const db = new Database(__dirname + '/data.sqlite');
    
    // R√©cup√©rer les informations de l'√©v√©nement et de la cat√©gorie
    const event = db.prepare('SELECT * FROM events WHERE id=?').get(state.event.id);
    let cats = JSON.parse(event.categories);
    let catIdx = cats.findIndex(c => c.name === state.category.name);
    let cat = cats[catIdx];
    
    // Envoyer un message de confirmation
    sendMessage(from, 'Paiement confirm√© ! G√©n√©ration de vos tickets en cours...');
    
    // D√©cr√©menter le stock maintenant que le paiement est confirm√©
    cat.quantite = (cat.quantite || cat.quantity) - state.quantity;
    cats[catIdx] = cat;
    db.prepare('UPDATE events SET categories=? WHERE id=?').run(JSON.stringify(cats), event.id);
    
    // G√©n√©rer un ticket pour chaque place achet√©e
    const prix = cat.prix || cat.price;
    generateTickets(from, state, event, cat, prix);
    
    // Mettre √† jour l'√©tat de l'utilisateur
    userStates[from] = { step: 'init' };
    
    // Envoyer un message final
    sendMessage(from, 
      `Merci ! Votre r√©servation de ${state.quantity} ticket(s) pour "${event.name}" en cat√©gorie "${cat.name}" est confirm√©e.\n` +
      `Vos tickets vous sont envoy√©s par WhatsApp.\n` +
      `Tapez "menu" pour recommencer.`
    );
  } catch (error) {
    console.error('Erreur lors du traitement du paiement r√©ussi:', error);
    sendMessage(from, 'Une erreur est survenue lors de la g√©n√©ration de vos tickets. Veuillez contacter le support.');
    userStates[from] = { step: 'init' };
  }
}

/**
 * G√©n√®re les tickets pour l'utilisateur
 */
function generateTickets(from, state, event, cat, prix) {
  // Variables pour la g√©n√©ration de ticket
  const QR_CODE_LENGTH = 7;
  
  for (let i = 0; i < state.quantity; i++) {
    try {
      // Chaque ticket a sa propre r√©servation (quantity = 1)
      const rsvInfo = db.prepare(`
        INSERT INTO reservations (
          user, phone, event_id, event_name, category_name, 
          quantity, unit_price, total_price, date, payment_reference, payment_status
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), ?, ?)
      `).run(
        from, from, event.id, event.name, cat.name, 
        1, prix, prix, state.paymentReference, 'paid'
      );

      // Calculer le num√©ro de ticket s√©quentiel pour cet event/cat
      const previousTickets = db.prepare('SELECT COUNT(*) as count FROM reservations WHERE event_id=? AND category_name=?').get(event.id, cat.name);
      const ticketNum = (previousTickets.count || 0) + 1;

      // G√©n√©rer l'ID format√©
      let categoriesArr = event.categories;
      if (typeof categoriesArr === 'string') {
        try {
          categoriesArr = JSON.parse(categoriesArr);
        } catch (e) {
          console.error('Erreur de parsing event.categories:', event.categories, e);
          categoriesArr = [];
        }
      }
      const catIdxForId = Array.isArray(categoriesArr) ? categoriesArr.findIndex(c => c.name === cat.name) : -1;
      const formattedId = formatReservationId(event.id, catIdxForId, ticketNum);

      // G√©n√©rer un code QR unique
      let qrCode;
      let maxAttempts = 10;
      let attempts = 0;
      do {
        qrCode = String(Math.floor(Math.pow(10, QR_CODE_LENGTH - 1) + Math.random() * (Math.pow(10, QR_CODE_LENGTH) - Math.pow(10, QR_CODE_LENGTH - 1))));
        attempts++;
        if (attempts > maxAttempts) {
          console.error('Impossible de g√©n√©rer un QR code unique apr√®s plusieurs tentatives.');
          break;
        }
      } while (db.prepare('SELECT 1 FROM reservations WHERE qr_code = ?').get(qrCode));

      // Mettre √† jour la r√©servation avec les codes g√©n√©r√©s
      try {
        // V√©rifier si la colonne code existe avant de l'utiliser
        const columnInfo = db.prepare("PRAGMA table_info(reservations)").all();
        const codeColumnExists = columnInfo.some(col => col.name === 'code');
        
        if (codeColumnExists) {
          db.prepare('UPDATE reservations SET formatted_id=?, qr_code=?, code=? WHERE id=?').run(formattedId, qrCode, formattedId, rsvInfo.lastInsertRowid);
        } else {
          db.prepare('UPDATE reservations SET formatted_id=?, qr_code=? WHERE id=?').run(formattedId, qrCode, rsvInfo.lastInsertRowid);
        }
      } catch (err) {
        console.error("Erreur lors de la mise √† jour de la r√©servation:", err);
        // Fallback en cas d'erreur
        db.prepare('UPDATE reservations SET formatted_id=?, qr_code=? WHERE id=?').run(formattedId, qrCode, rsvInfo.lastInsertRowid);
      }

      // G√©n√©rer et envoyer le ticket
      setTimeout(() => {
        try {
          generateAndSendTicket({
            to: from,
            eventName: event.name,
            category: cat.name,
            reservationId: rsvInfo.lastInsertRowid,
            formattedId,
            qrCode
          });
        } catch (err) {
          console.error('Erreur lors de l\'appel √† generateAndSendTicket (WhatsApp):', {
            catIdx: catIdxForId, formattedId, qrCode, from, eventName: event.name, category: cat.name, reservationId: rsvInfo.lastInsertRowid, err
          });
        }
      }, 0);
    } catch (err) {
      console.error('Erreur lors de la g√©n√©ration du ticket (WhatsApp, boucle):', err);
    }
  }
}

// Fonction fictive pour envoyer un message (√† remplacer par votre impl√©mentation r√©elle)
function sendMessage(to, message) {
  console.log(`Envoi d'un message √† ${to}:`, message);
  // Votre code d'envoi de message WhatsApp ici
}

// Export des fonctions pour utilisation dans le code principal
module.exports = {
  processMessage,
  processSuccessfulPayment
};
