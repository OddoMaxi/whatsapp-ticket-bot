// =============================
// INITIALISATION DU BOT TELEGRAM
// =============================
const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

// Importation du service ChapChap Pay
const chapchapPay = require('./services/chapchap-pay');

// polling:// R√©cup√©rer le token du bot depuis les variables d'environnement
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const telegramBot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

// Map pour stocker les sessions de paiement en cours (userId => sessionData)
const paymentSessions = new Map();

// Fonction pour g√©rer la v√©rification du paiement et l'envoi des tickets
async function handlePaymentVerification(chatId, userId, reference) {
  console.log(`[Bot] V√©rification du paiement ${reference} pour l'utilisateur ${userId}`);
  
  // V√©rifier si l'utilisateur a une session active
  if (!paymentSessions.has(userId)) {
    console.log(`[Bot] Pas de session trouv√©e pour l'utilisateur ${userId}`);
    return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
  }
  
  const session = paymentSessions.get(userId);
  
  // V√©rifier que la r√©f√©rence correspond √† celle de la session
  if (session.reference !== reference) {
    console.log(`[Bot] R√©f√©rence de paiement invalide: ${session.reference} != ${reference}`);
    return telegramBot.sendMessage(chatId, 'R√©f√©rence de paiement invalide. Veuillez r√©essayer.');
  }
  
  // V√©rifier le statut du paiement
  try {
    const paymentStatus = await chapchapPay.checkPaymentStatus(reference);
    console.log(`[Bot] Statut du paiement ${reference}: ${paymentStatus.status}`);
    
    // Initier la connexion √† la base de donn√©es
    const Database = require('better-sqlite3');
    const db = new Database(__dirname + '/data.sqlite');
    
    // Si le paiement n'est pas valid√©, informer l'utilisateur
    if (paymentStatus.status !== 'success' && paymentStatus.status !== 'completed' && paymentStatus.status !== 'paid') {
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîÑ V√©rifier √† nouveau', callback_data: `check_payment:${reference}` }],
          [{ text: '‚ùå Annuler', callback_data: 'cancel_purchase' }]
        ]
      };
      
      await telegramBot.sendMessage(
        chatId,
        `Votre paiement n'a pas encore √©t√© confirm√©.\n` +
        `Statut : ${paymentStatus.status_description || paymentStatus.status}\n` +
        `Veuillez r√©essayer dans quelques instants.`,
        { reply_markup: keyboard }
      );
      return;
    }
    
    // Si le paiement est valid√© mais que la session est d√©j√† marqu√©e comme pay√©e, √©viter le double envoi
    if (session.step === 'paid') {
      console.log(`[Bot] Session d√©j√† marqu√©e comme pay√©e pour ${reference}`);
      return telegramBot.sendMessage(chatId, 'Vos tickets ont d√©j√† √©t√© g√©n√©r√©s et envoy√©s.');
    }
    
    // Mettre √† jour l'√©tat de la session
    session.step = 'paid';
    paymentSessions.set(userId, session);
    
    // Le reste du code pour g√©n√©rer et envoyer les tickets sera ex√©cut√© dans la fonction de v√©rification de paiement existante
    console.log(`[Bot] Paiement confirm√© pour ${reference}, tickets pr√™ts √† √™tre g√©n√©r√©s`);
    
    return true; // Indiquer que le paiement a √©t√© v√©rifi√© avec succ√®s
  } catch (error) {
    console.error(`[Bot] Erreur lors de la v√©rification du paiement ${reference}:`, error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue lors de la v√©rification du paiement. Veuillez r√©essayer plus tard.');
    return false;
  }
}

// =============================
// COMMANDES DU BOT
// =============================

// Commande /start - Message de bienvenue
telegramBot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üéüÔ∏è Acheter des tickets', callback_data: 'start_purchase' }],
      [{ text: 'üìã Mes tickets', callback_data: 'my_tickets' }],
      [{ text: '‚ùì Aide', callback_data: 'help' }]
    ]
  };
  telegramBot.sendMessage(chatId, `Bienvenue ${msg.from.first_name} sur le service d'achat de tickets !

Choisissez une option ci-dessous:`, { reply_markup: keyboard });
});

// Commande /aide - Affiche l'aide
telegramBot.onText(/\/aide/, (msg) => {
  const chatId = msg.chat.id;
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üéüÔ∏è Acheter des tickets', callback_data: 'start_purchase' }],
      [{ text: 'üìã Mes tickets', callback_data: 'my_tickets' }],
      [{ text: 'üè† Retour au menu', callback_data: 'main_menu' }]
    ]
  };
  telegramBot.sendMessage(chatId, `Voici comment utiliser le service d'achat de tickets :

Pour acheter un ticket :
1. S√©lectionnez un √©v√©nement
2. Choisissez une cat√©gorie de ticket
3. S√©lectionnez la quantit√©
4. Proc√©dez au paiement via ChapChap Pay
5. V√©rifiez le statut du paiement
6. Recevez vos tickets !

Choisissez une option ci-dessous:`, { reply_markup: keyboard });
});

// Commande /acheter - D√©marre le processus d'achat de tickets
telegramBot.onText(/\/acheter/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    // V√©rifier si l'utilisateur a d√©j√† une session de paiement en cours
    if (paymentSessions.has(userId)) {
      return telegramBot.sendMessage(chatId, 'Vous avez d√©j√† une session d\'achat en cours. Veuillez la terminer ou l\'annuler avant d\'en d√©marrer une nouvelle.');
    }

    // R√©cup√©rer les √©v√©nements disponibles depuis la base de donn√©es
    const Database = require('better-sqlite3');
    const db = new Database(__dirname + '/data.sqlite');
    
    const events = db.prepare(`
      SELECT * FROM events 
      WHERE active = 1 
      ORDER BY date
    `).all();

    if (!events || events.length === 0) {
      return telegramBot.sendMessage(chatId, 'Aucun √©v√©nement disponible pour le moment.');
    }

    // Cr√©er les boutons pour les √©v√©nements
    const keyboard = {
      inline_keyboard: []
    };

    events.forEach(event => {
      keyboard.inline_keyboard.push([{
        text: event.name,
        callback_data: `select_event:${event.id}`
      }]);
    });

    // Ajouter un bouton d'annulation
    keyboard.inline_keyboard.push([{
      text: 'Annuler',
      callback_data: 'cancel_purchase'
    }]);

    await telegramBot.sendMessage(chatId, 'Veuillez s√©lectionner un √©v√©nement :', {
      reply_markup: keyboard
    });

    // Initialiser une session de paiement
    paymentSessions.set(userId, { step: 'select_event' });

  } catch (error) {
    console.error('Erreur lors de l\'initialisation de l\'achat :', error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
  }
});

// Commande /mestickets - Affiche les tickets de l'utilisateur
telegramBot.onText(/\/mestickets/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || '';
  
  try {
    const Database = require('better-sqlite3');
    const db = new Database(__dirname + '/data.sqlite');
    
    // R√©cup√©rer les r√©servations de l'utilisateur (via l'ID Telegram ou le username)
    const reservations = db.prepare(`
      SELECT * FROM reservations 
      WHERE (purchase_channel = 'telegram' AND phone = ?) 
      ORDER BY created_at DESC
    `).all(username);
    
    if (!reservations || reservations.length === 0) {
      return telegramBot.sendMessage(chatId, 'Vous n\'avez pas encore achet√© de tickets.');
    }
    
    // Envoyer un message avec la liste des tickets
    let message = 'Voici vos tickets achet√©s :\n\n';
    
    reservations.forEach((reservation, index) => {
      message += `${index + 1}. ${reservation.event_name} - ${reservation.category_name}\n`;
      message += `   Quantit√©: ${reservation.quantity}\n`;
      message += `   Prix: ${reservation.total_price} GNF\n`;
      message += `   R√©f√©rence: ${reservation.formatted_id}\n\n`;
    });
    
    message += 'Pour voir le d√©tail d\'un ticket, utilisez /ticket suivi du num√©ro de la liste.';
    
    telegramBot.sendMessage(chatId, message);
    
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des tickets :', error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
  }
});

// Commande /ticket - Affiche un ticket sp√©cifique
telegramBot.onText(/\/ticket ([0-9]+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || '';
  const ticketIndex = parseInt(match[1]) - 1;
  
  try {
    const Database = require('better-sqlite3');
    const db = new Database(__dirname + '/data.sqlite');
    
    // R√©cup√©rer les r√©servations de l'utilisateur
    const reservations = db.prepare(`
      SELECT * FROM reservations 
      WHERE (purchase_channel = 'telegram' AND phone = ?) 
      ORDER BY date DESC
    `).all(username);
    
    if (!reservations || reservations.length === 0 || ticketIndex < 0 || ticketIndex >= reservations.length) {
      return telegramBot.sendMessage(chatId, 'Ticket non trouv√©. Veuillez v√©rifier le num√©ro du ticket.');
    }
    
    const reservation = reservations[ticketIndex];
    
    // G√©n√©rer le ticket image
    // Note: cette partie d√©pend de l'impl√©mentation de votre fonction generateAndSendTicket
    const generateAndSendTicket = require('./index').generateAndSendTicket;
    
    generateAndSendTicket({
      to: chatId,
      channel: 'telegram',
      eventName: reservation.event_name,
      category: reservation.category_name,
      reservationId: reservation.id,
      price: reservation.unit_price,
      formattedId: reservation.formatted_id,
      qrCode: reservation.qr_code
    });
    
  } catch (error) {
    console.error('Erreur lors de l\'affichage du ticket :', error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
  }
});

// =============================
// HANDLER TEXTE : R√âPONSE "OUI" (fallback si l'utilisateur tape au lieu de cliquer)
// =============================
telegramBot.on('message', async (msg) => {
  // Ignorer les commandes commen√ßant par '/'
  if (!msg.text || msg.text.startsWith('/')) return;
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text.trim().toLowerCase();

  // V√©rifier si l'utilisateur tape "oui", "ok" ou autre confirmation alors qu'il devrait cliquer sur le bouton
  if (text === 'oui' || text === 'oui, confirmer' || text === 'yes' || text === 'ok' || text === 'Ok') {
    if (!paymentSessions.has(userId)) return; // Aucune session
    const session = paymentSessions.get(userId);

    // Seuls les √©tats en cours de cr√©ation de paiement sont accept√©s
    if (session.step !== 'payment_creation') return;

    console.log('DEBUG: R√©ponse texte "oui" d√©tect√©e, g√©n√©ration du lien de paiement ...', { session });

    // Reproduire la logique du callback confirm_purchase
    try {
      const Database = require('better-sqlite3');
      const db = new Database(__dirname + '/data.sqlite');

      // V√©rifier la disponibilit√© des places
      const eventInfo = db.prepare('SELECT available_seats FROM events WHERE id = ?').get(session.event.id);
      if (eventInfo && typeof eventInfo.available_seats === 'number' && eventInfo.available_seats < session.quantity) {
        return telegramBot.sendMessage(chatId, `D√©sol√©, il ne reste que ${eventInfo.available_seats} place(s) disponible(s) pour cet √©v√©nement.`);
      }

      // G√©n√©rer une r√©f√©rence unique pour ce paiement
      const reference = chapchapPay.generateTransactionId();
      session.reference = reference;

      // G√©n√©rer le lien de paiement
      const paymentData = {
        amount: session.totalPrice,
        description: `Achat de ${session.quantity} ticket(s) pour ${session.event.name} - ${session.category.name}`,
        reference
      };

      const paymentResponse = await chapchapPay.generatePaymentLink(paymentData);

      // Mettre √† jour la session
      session.paymentUrl = paymentResponse.payment_url;
      session.step = 'payment_pending';
      paymentSessions.set(userId, session);

      // Envoyer le lien de paiement
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí≥ Payer maintenant', url: paymentResponse.payment_url }],
          [{ text: 'üîÑ V√©rifier le paiement', callback_data: `check_payment:${reference}` }],
          [{ text: '‚ùå Annuler', callback_data: 'cancel_purchase' }]
        ]
      };

      await telegramBot.sendMessage(
        chatId,
        `üí∏ Votre lien de paiement est pr√™t !\n\n` +
        `üí∞ Montant : ${paymentResponse.payment_amount_formatted}\n` +
        `üÜî R√©f√©rence : ${reference}\n\n` +
        `‚≠ê Cliquez sur "Payer maintenant" pour proc√©der au paiement.\n` +
        `‚ùï Apr√®s paiement, cliquez sur "V√©rifier le paiement" pour g√©n√©rer vos tickets.`,
        { reply_markup: keyboard }
      );
    } catch (e) {
      console.error('Erreur lors de la g√©n√©ration du lien de paiement (r√©ponse texte oui) :', e);
      telegramBot.sendMessage(chatId, 'Une erreur est survenue lors de la g√©n√©ration du lien de paiement. Veuillez r√©essayer plus tard.');
    }
  }
});

// =============================
// CALLBACKS POUR LES BOUTONS INLINE
// =============================

// Callback pour la s√©lection d'un √©v√©nement
telegramBot.on('callback_query', async (callbackQuery) => {
  const data = callbackQuery.data;
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const userId = callbackQuery.from.id;
  
  // DEBUG: Afficher les donn√©es du callback
  console.log('=== TELEGRAM CALLBACK DEBUG ===');
  console.log('Callback data re√ßue:', data);
  console.log('User ID:', userId, 'Chat ID:', chatId);
  console.log('Session existante:', paymentSessions.has(userId));
  if (paymentSessions.has(userId)) {
    const session = paymentSessions.get(userId);
    console.log('Session step:', session.step);
  }
  
  // Acquitter le callback query pour √©viter le chargement infini
  telegramBot.answerCallbackQuery(callbackQuery.id);
  
  try {
    // S√©lection d'un √©v√©nement
    if (data.startsWith('select_event:')) {
      const eventId = data.split(':')[1];
      
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      // R√©cup√©rer les informations de l'√©v√©nement
      const Database = require('better-sqlite3');
      const db = new Database(__dirname + '/data.sqlite');
      
      const event = db.prepare('SELECT * FROM events WHERE id = ?').get(eventId);
      if (!event) {
        return telegramBot.sendMessage(chatId, '√âv√©nement non trouv√©. Veuillez r√©essayer.');
      }
      
      // Mettre √† jour la session avec l'√©v√©nement s√©lectionn√©
      const session = paymentSessions.get(userId);
      session.event = event;
      session.step = 'select_category';
      paymentSessions.set(userId, session);
      
      // R√©cup√©rer les cat√©gories de l'√©v√©nement
      let categories = [];
      try {
        categories = JSON.parse(event.categories || '[]');
      } catch (e) {
        categories = [{ name: 'Standard', price: 5000 }];
      }
      
      // Cr√©er les boutons pour les cat√©gories
      const keyboard = {
        inline_keyboard: []
      };
      
      categories.forEach(category => {
        const price = category.price || category.prix || 0;
        keyboard.inline_keyboard.push([{
          text: `${category.name} - ${price} GNF`,
          callback_data: `select_category:${category.name}:${price}`
        }]);
      });
      
      // Ajouter un bouton d'annulation
      keyboard.inline_keyboard.push([{
        text: 'Annuler',
        callback_data: 'cancel_purchase'
      }]);
      
      await telegramBot.sendMessage(
        chatId,
        `Vous avez s√©lectionn√© : ${event.name}\nVeuillez choisir une cat√©gorie :`,
        { reply_markup: keyboard }
      );
    }
    
    // S√©lection d'une cat√©gorie
    else if (data.startsWith('select_category:')) {
      const parts = data.split(':');
      const categoryName = parts[1];
      const price = parseInt(parts[2]);
      
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      // Mettre √† jour la session avec la cat√©gorie s√©lectionn√©e
      const session = paymentSessions.get(userId);
      session.category = { name: categoryName, price: price };
      session.step = 'select_quantity';
      paymentSessions.set(userId, session);
      
      // Cr√©er les boutons pour les quantit√©s - version am√©lior√©e avec 5 boutons sur une m√™me ligne
      const keyboard = {
        inline_keyboard: [
          [
            { text: '1üéüÔ∏è', callback_data: 'select_quantity:1' },
            { text: '2üéüÔ∏è', callback_data: 'select_quantity:2' },
            { text: '3üéüÔ∏è', callback_data: 'select_quantity:3' },
            { text: '4üéüÔ∏è', callback_data: 'select_quantity:4' },
            { text: '5üéüÔ∏è', callback_data: 'select_quantity:5' }
          ],
          [{ text: '‚ùå Annuler', callback_data: 'cancel_purchase' }]
        ]
      };
      
      await telegramBot.sendMessage(
        chatId,
        `Cat√©gorie s√©lectionn√©e : ${categoryName} - ${price} GNF\nVeuillez choisir la quantit√© :`,
        { reply_markup: keyboard }
      );
    }
    
    // S√©lection de la quantit√©
    else if (data.startsWith('select_quantity:')) {
      const quantity = parseInt(data.split(':')[1]);
      
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        console.log('ERREUR: Session non trouv√©e pour l\'utilisateur', userId);
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      // Mettre √† jour la session avec la quantit√© s√©lectionn√©e
      const session = paymentSessions.get(userId);
      session.quantity = parseInt(quantity, 10); // S'assurer que la quantit√© est un nombre entier
      session.step = 'payment_creation';
      session.totalPrice = session.category.price * session.quantity;
      paymentSessions.set(userId, session);
      
      console.log(`[Bot] Quantit√© s√©lectionn√©e: ${session.quantity} (type: ${typeof session.quantity})`);
      
      // Afficher le r√©capitulatif et demander confirmation avec des boutons plus explicites
      const confirmKeyboard = {
        inline_keyboard: [
          [{
            text: '‚úÖ Confirmer et payer',
            callback_data: 'confirm_purchase'
          }],
          [{
            text: 'üîô Modifier la quantit√©',
            callback_data: `select_category:${session.category.name}:${session.category.price}`
          }],
          [{
            text: '‚ùå Annuler l\'achat',
            callback_data: 'cancel_purchase'
          }]
        ]
      };
      
      await telegramBot.sendMessage(
        chatId,
        `R√©capitulatif de votre commande :\n` +
        `√âv√©nement : ${session.event.name}\n` +
        `Cat√©gorie : ${session.category.name}\n` +
        `Quantit√© : ${quantity}\n` +
        `Prix unitaire : ${session.category.price} GNF\n` +
        `Prix total : ${session.totalPrice} GNF\n\n` +
        `Cliquez sur "Oui, confirmer" pour proc√©der au paiement.`,
        { reply_markup: confirmKeyboard }
      );
    }
    
    // Confirmer l'achat et g√©n√©rer le lien de paiement
    else if (data === 'confirm_purchase') {
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        console.log('ERREUR: Session non trouv√©e pour l\'utilisateur', userId);
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      const session = paymentSessions.get(userId);
      await telegramBot.sendMessage(chatId, 'G√©n√©ration du lien de paiement en cours...');
      
      // G√©n√©rons le lien de paiement
      try {
        const Database = require('better-sqlite3');
        const db = new Database(__dirname + '/data.sqlite');
        console.log('Connexion √† la base de donn√©es √©tablie');

        // V√©rifier la disponibilit√© des places
        const eventInfo = db.prepare('SELECT available_seats FROM events WHERE id = ?').get(session.event.id);
        if (eventInfo && typeof eventInfo.available_seats === 'number' && eventInfo.available_seats < session.quantity) {
          return telegramBot.sendMessage(chatId, `D√©sol√©, il ne reste que ${eventInfo.available_seats} place(s) disponible(s) pour cet √©v√©nement.`);
        }

        // G√©n√©rer une r√©f√©rence unique pour ce paiement
        const reference = chapchapPay.generateTransactionId();
        session.reference = reference;

        // G√©n√©rer le lien de paiement
        const paymentData = {
          amount: session.totalPrice,
          description: `Achat de ${session.quantity} ticket(s) pour ${session.event.name} - ${session.category.name}`,
          reference
        };

        console.log('Donn√©es de paiement pr√™tes:', JSON.stringify(paymentData));
        await telegramBot.sendMessage(chatId, 'G√©n√©ration du lien de paiement en cours...');

        console.log('Appel au service chapchapPay.generatePaymentLink...');
        const paymentResponse = await chapchapPay.generatePaymentLink(paymentData);

        // Stocker les informations de paiement dans la session
        session.paymentUrl = paymentResponse.payment_url;
        session.step = 'payment_pending';
        paymentSessions.set(userId, session);

        // Envoyer le lien de paiement
        const keyboard = {
          inline_keyboard: [
            [{
              text: 'üí≥ Payer maintenant',
              url: paymentResponse.redirect_url
            }],
            [{
              text: '‚ùå Annuler',
              callback_data: 'cancel_purchase'
            }]
          ]
        };

        await telegramBot.sendMessage(
          chatId,
          `üí∏ Votre lien de paiement est pr√™t !\n\n` +
          `üí∞ Montant : ${paymentResponse.payment_amount_formatted}\n` +
          `üÜî R√©f√©rence : ${reference}\n\n` +
          `‚≠ê Cliquez sur "Payer maintenant" pour proc√©der au paiement.\n` +
          `‚úÖ Vos tickets seront automatiquement g√©n√©r√©s une fois le paiement confirm√©.`,
          { reply_markup: keyboard }
        );

        // Configuration de la v√©rification automatique du paiement
        console.log('[Bot] Configuration de la v√©rification automatique du paiement');

        // V√©rifier le statut du paiement toutes les 10 secondes pendant 5 minutes (30 tentatives)
        let checkAttempts = 0;
        const maxCheckAttempts = 30;

        const paymentCheckInterval = setInterval(async () => {
          checkAttempts++;
          console.log(`[Bot] V√©rification automatique du paiement ${reference} - tentative ${checkAttempts}/${maxCheckAttempts}`);

          // Si l'utilisateur a annul√© l'achat ou la session n'existe plus, arr√™ter les v√©rifications
          if (!paymentSessions.has(userId) || paymentSessions.get(userId).step === 'paid') {
            console.log(`[Bot] Arr√™t des v√©rifications : l'utilisateur a annul√© ou la session est termin√©e`);
            clearInterval(paymentCheckInterval);
            return;
          }

          try {
            // V√©rifier le statut du paiement
            const paymentStatus = await chapchapPay.checkPaymentStatus(reference);
            console.log(`[Bot] Statut du paiement ${reference} : ${paymentStatus.status}`);

            // Si le paiement est valid√©, g√©n√©rer automatiquement les tickets
            if (paymentStatus.status === 'success' || paymentStatus.status === 'completed' || paymentStatus.status === 'paid') {
              console.log(`[Bot] Paiement ${reference} confirm√©, g√©n√©ration automatique des tickets`);
              clearInterval(paymentCheckInterval);

              // Utiliser la fonction existante pour v√©rifier le paiement
              await handlePaymentVerification(chatId, userId, reference);
            }

            // Arr√™ter les v√©rifications apr√®s le nombre maximum de tentatives
            if (checkAttempts >= maxCheckAttempts) {
              console.log(`[Bot] Nombre maximum de v√©rifications atteint pour le paiement ${reference}`);
              clearInterval(paymentCheckInterval);

              // Informer l'utilisateur
              const manualCheckKeyboard = {
                inline_keyboard: [[
                  {
                    text: 'üîÑ V√©rifier mon paiement',
                    callback_data: `check_payment:${reference}`
                  }
                ]]
              };

              await telegramBot.sendMessage(
                chatId,
                `‚è∞ La v√©rification automatique de votre paiement est termin√©e.\n\n` +
                `Si vous avez d√©j√† effectu√© le paiement mais n'avez pas re√ßu vos tickets, vous pouvez v√©rifier manuellement.`,
                { reply_markup: manualCheckKeyboard }
              );
            }
          } catch (error) {
            console.error(`[Bot] Erreur lors de la v√©rification automatique du paiement ${reference} :`, error);
          }
        }, 10000); // V√©rification toutes les 10 secondes
      } catch (error) {
        console.error('Erreur lors de la g√©n√©ration du lien de paiement:', error);
        telegramBot.sendMessage(chatId, 'Une erreur est survenue lors de la g√©n√©ration du lien de paiement. Veuillez r√©essayer plus tard.');
      }
    }

    
    // V√©rification du paiement
    else if (data.startsWith('check_payment:')) {
      console.log('=== D√âBUT V√âRIFICATION DE PAIEMENT ===');
      const reference = data.split(':')[1];
      console.log('R√©f√©rence de paiement:', reference);
      
      // Message d'attente pendant la v√©rification
      await telegramBot.sendMessage(chatId, 'V√©rification du statut de votre paiement...');
      
      // Utiliser la fonction de v√©rification du paiement
      const paymentVerified = await handlePaymentVerification(chatId, userId, reference);
      
      // Si le paiement n'est pas v√©rifi√© avec succ√®s, arr√™ter l√†
      if (!paymentVerified) {
        return;
      }
      
      // R√©cup√©rer la session mise √† jour
      const session = paymentSessions.get(userId);
      
      // Initier la connexion √† la base de donn√©es pour la g√©n√©ration de tickets
      const Database = require('better-sqlite3');
      const db = new Database(__dirname + '/data.sqlite');
      console.log('Connexion √† la base de donn√©es √©tablie pour la g√©n√©ration de tickets');
      
      // Le statut de paiement est d√©j√† v√©rifi√© dans handlePaymentVerification
      // Suite du traitement pour g√©n√©rer les tickets
      try {
        console.log('Paiement confirm√© pour cette session');
        console.log('DEBUG: Session actuelle apr√®s confirmation du paiement:', JSON.stringify(session, null, 2));
        console.log('DEBUG: Quantit√© de tickets d√©tect√©e:', session.quantity, typeof session.quantity);
        
        // S'assurer que session.quantity est un nombre et qu'il est au moins 1
        if (session.quantity === undefined || session.quantity === null || isNaN(Number(session.quantity))) {
          console.log('DEBUG: Quantit√© non d√©finie ou invalide dans la session. R√©glage sur 1.');
          session.quantity = 1;
        } else {
          // Convertir explicitement en nombre pour √©viter les probl√®mes de type
          session.quantity = Number(session.quantity);
          console.log('DEBUG: Quantit√© convertie en nombre:', session.quantity);
        }
        
        // Mettre √† jour la session
        paymentSessions.set(userId, session);
        
        // R√©cup√©rer l'√©v√©nement avec les donn√©es actuelles
        const event = db.prepare('SELECT * FROM events WHERE id = ?').get(session.event.id);
        if (!event) {
          throw new Error(`√âv√©nement avec l'ID ${session.event.id} introuvable`);
        }
        
        // Mise √† jour du nombre total de places disponibles
        if (typeof event.available_seats === 'number') {
          const newAvailableSeats = Math.max(0, event.available_seats - session.quantity);
          db.prepare('UPDATE events SET available_seats = ? WHERE id = ?').run(newAvailableSeats, session.event.id);
          console.log(`[Bot] Nombre total de places mis √† jour pour l'√©v√©nement #${session.event.id}: ${event.available_seats} -> ${newAvailableSeats}`);
        }
        
        // Mise √† jour de la quantit√© sp√©cifique √† la cat√©gorie
        const categoriesStr = event.categories;
        if (categoriesStr) {
          // Paiement r√©ussi, proc√©der √† la cr√©ation des tickets
          await telegramBot.sendMessage(chatId, 'Paiement confirm√© ! G√©n√©ration de vos tickets en cours...');
          
          // Cr√©er la r√©servation dans la base de donn√©es
          const username = callbackQuery.from.username || '';
          const fullName = callbackQuery.from.first_name + ' ' + (callbackQuery.from.last_name || '');
          
          // Ins√©rer la r√©servation avec statut de paiement
          // V√©rifier si les colonnes de paiement existent dans la table
          let insertResult;
          try {
            // V√©rifier si les colonnes payment_reference et payment_status existent
            const columns = db.prepare("PRAGMA table_info(reservations)").all();
            const hasPaymentColumns = columns.some(col => col.name === 'payment_reference') && 
                                       columns.some(col => col.name === 'payment_status');
            
            console.log('Colonnes de paiement disponibles:', hasPaymentColumns);
            
            // G√©n√©rer la date actuelle pour la r√©servation
            const currentDate = new Date().toISOString().split('T')[0]; // Format YYYY-MM-DD
            
            // G√©n√©rer un code QR unique √† 7 chiffres pour le ticket principal
            const qrCode = chapchapPay.generateQRCode();
            console.log(`[Bot] Nouveau QR code g√©n√©r√© pour le ticket principal : ${qrCode}`);

            if (hasPaymentColumns) {
              // Version avec colonnes de paiement
              insertResult = db.prepare(`
                INSERT INTO reservations 
                (user, phone, event_id, event_name, category_name, quantity, unit_price, total_price, purchase_channel, formatted_id, qr_code, payment_reference, payment_status, date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
              `).run(
                fullName,
                username,
                session.event.id,
                session.event.name,
                session.category.name,
                session.quantity,
                session.category.price,
                session.totalPrice,
                'telegram',
                reference,
                qrCode,    // Utiliser un code QR unique √† 7 chiffres au lieu de la r√©f√©rence
                reference,
                'paid',
                currentDate
              );
            } else {
              // Version sans colonnes de paiement
              insertResult = db.prepare(`
                INSERT INTO reservations 
                (user, phone, event_id, event_name, category_name, quantity, unit_price, total_price, purchase_channel, formatted_id, qr_code, date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
              `).run(
                fullName,
                username,
                session.event.id,
                session.event.name,
                session.category.name,
                session.quantity,
                session.category.price,
                session.totalPrice,
                'telegram',
                reference,
                qrCode,    // Utiliser un code QR unique √† 7 chiffres au lieu de la r√©f√©rence
                currentDate
              );
            }
          } catch (sqlError) {
            console.error('Erreur SQL lors de l\'insertion de la r√©servation:', sqlError);
            // Fallback avec une version minimale sans v√©rification de colonnes
            const currentDate = new Date().toISOString().split('T')[0]; // Format YYYY-MM-DD
            insertResult = db.prepare(`
              INSERT INTO reservations 
              (user, phone, event_id, event_name, category_name, quantity, unit_price, total_price, date)
              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            `).run(
              fullName,
              username,
              session.event.id,
              session.event.name,
              session.category.name,
              session.quantity,
              session.category.price,
              session.totalPrice,
              currentDate // Ajouter le param√®tre manquant pour la date
            );
          }
          
          // Mettre √† jour le nombre de places disponibles (total et par cat√©gorie)
          try {
            // R√©cup√©rer l'√©v√©nement avec les donn√©es actuelles
            const event = db.prepare('SELECT * FROM events WHERE id = ?').get(session.event.id);
            if (!event) {
              throw new Error(`√âv√©nement avec l'ID ${session.event.id} introuvable`);
            }
            
            // Mise √† jour du nombre total de places disponibles
            if (typeof event.available_seats === 'number') {
              const newAvailableSeats = Math.max(0, event.available_seats - session.quantity);
              db.prepare('UPDATE events SET available_seats = ? WHERE id = ?').run(newAvailableSeats, session.event.id);
              console.log(`[Bot] Nombre total de places mis √† jour pour l'√©v√©nement #${session.event.id}: ${event.available_seats} -> ${newAvailableSeats}`);
            }
            
            // Mise √† jour de la quantit√© sp√©cifique √† la cat√©gorie
            const categoriesStr = event.categories;
            if (categoriesStr) {
              try {
                let categories = JSON.parse(categoriesStr);
                const categoryIndex = categories.findIndex(cat => cat.name === session.category.name);
                
                if (categoryIndex !== -1) {
                  const cat = categories[categoryIndex];
                  const qtyBefore = cat.quantite !== undefined ? cat.quantite : (cat.quantity !== undefined ? cat.quantity : 0);
                  
                  // Mise √† jour de la quantit√© (gestion des deux noms de propri√©t√© possibles: quantite ou quantity)
                  if (cat.quantite !== undefined) {
                    cat.quantite = Math.max(0, cat.quantite - session.quantity);
                    console.log(`[Bot] Quantit√© ('quantite') mise √† jour pour ${cat.name}: ${qtyBefore} -> ${cat.quantite}`);
                  } else if (cat.quantity !== undefined) {
                    cat.quantity = Math.max(0, cat.quantity - session.quantity);
                    console.log(`[Bot] Quantit√© ('quantity') mise √† jour pour ${cat.name}: ${qtyBefore} -> ${cat.quantity}`);
                  }
                  
                  // Sauvegarder les cat√©gories mises √† jour
                  const updateResult = db.prepare('UPDATE events SET categories = ? WHERE id = ?').run(JSON.stringify(categories), session.event.id);
                  console.log(`[Bot] Cat√©gorie mise √† jour pour l'√©v√©nement #${session.event.id}:`, { updateResult });
                } else {
                  console.error(`[Bot] Cat√©gorie ${session.category.name} introuvable dans l'√©v√©nement #${session.event.id}`);
                }
              } catch (jsonError) {
                console.error('Erreur lors du traitement JSON des cat√©gories:', jsonError);
              }
            } else {
              console.error(`[Bot] Aucune cat√©gorie trouv√©e pour l'√©v√©nement #${session.event.id}`);
            }
          } catch (updateError) {
            console.error('Erreur lors de la mise √† jour des places disponibles:', updateError);
          }
          
          // V√©rifier et ajouter les colonnes n√©cessaires √† la table reservations si elles n'existent pas
          try {
            // V√©rifier si la colonne order_reference existe pour lier tous les tickets d'une m√™me commande
            const columns = db.prepare("PRAGMA table_info(reservations)").all();
            const hasOrderReference = columns.some(col => col.name === 'order_reference');
            
            // Ajouter la colonne order_reference si n√©cessaire
            if (!hasOrderReference) {
              console.log('[Bot] Ajout de la colonne order_reference √† la table reservations');
              db.prepare("ALTER TABLE reservations ADD COLUMN order_reference TEXT").run();
            }
          } catch (schemaError) {
            console.error('[Bot] Erreur lors de la v√©rification/modification du sch√©ma:', schemaError);
          }
          
          // Cr√©er une r√©f√©rence de commande unique pour relier tous les tickets
          const orderReference = chapchapPay.generateTransactionId();
          console.log(`[Bot] R√©f√©rence de commande g√©n√©r√©e : ${orderReference}`);
          
          // On convertit explicitement la quantit√© en nombre entier
          const ticketQuantity = parseInt(session.quantity, 10);
          console.log(`[Bot] G√©n√©ration de ${ticketQuantity} tickets pour la commande ${orderReference}`);
          
          // G√©n√©ration des tickets (on assume que le paiement est valid√© puisqu'on est dans cette partie du code)
          // Correction de l'erreur ReferenceError: paymentStatus is not defined
          const paymentStatusIsValid = true; // On assume que le paiement est valid√© car nous sommes dans cette section du code
          if (paymentStatusIsValid) {
            // D√©finir la date actuelle pour tous les tickets
            const currentDate = new Date().toISOString().slice(0, 19).replace('T', ' ');
            console.log(`[Bot] Date de g√©n√©ration des tickets: ${currentDate}`);
            
            // G√©n√©rer tous les tickets individuellement avec un QR code unique
            const generatedTickets = [];
            
            for (let i = 0; i < ticketQuantity; i++) {
              try {
                // G√©n√©rer un QR code unique pour chaque ticket
                const uniqueQRCode = chapchapPay.generateQRCode();
                const ticketNumber = i + 1;
                const formattedTicketId = `${orderReference}-${ticketNumber}`;
                
                console.log(`[Bot] G√©n√©ration du ticket #${ticketNumber} avec QR code: ${uniqueQRCode}`);
                
                // Pr√©parer la requ√™te SQL avec la colonne order_reference
                const sql = `
                  INSERT INTO reservations 
                  (user, phone, event_id, event_name, category_name, quantity, unit_price, 
                   total_price, purchase_channel, formatted_id, qr_code, date, order_reference)
                  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                `;
                
                // Ins√©rer le ticket dans la base de donn√©es
                const insertResult = db.prepare(sql).run(
                  fullName,
                  username,
                  session.event.id,
                  session.event.name,
                  session.category.name,
                  1, // Chaque ticket est individuel
                  session.category.price,
                  session.category.price, // Prix unitaire
                  'telegram',
                  formattedTicketId,
                  uniqueQRCode, // Code QR unique al√©atoire
                  currentDate,
                  orderReference // R√©f√©rence commune pour tous les tickets de cette commande
                );
                
                console.log(`[Bot] Ticket #${ticketNumber} ins√©r√© avec succ√®s. ID: ${insertResult.lastInsertRowid}`);
                
                // Stocker les informations du ticket pour l'envoi ult√©rieur
                generatedTickets.push({
                  id: insertResult.lastInsertRowid,
                  eventName: session.event.name,
                  categoryName: session.category.name,
                  price: session.category.price,
                  formattedId: formattedTicketId,
                  qrCode: uniqueQRCode,
                  ticketNumber
                });
              } catch (ticketError) {
                console.error(`[Bot] Erreur lors de la g√©n√©ration du ticket #${i+1}:`, ticketError);
              }
            }
            
            // Apr√®s avoir g√©n√©r√© tous les tickets, on les envoie √† l'utilisateur
            session.generatedTickets = generatedTickets;
            session.orderReference = orderReference;
            paymentSessions.set(userId, session);
            
            console.log(`[Bot] ${generatedTickets.length} tickets g√©n√©r√©s avec succ√®s pour la commande ${orderReference}`);
          } else {
            console.log(`[Bot] Paiement non valid√© (status: ${paymentStatus.status}), aucun ticket g√©n√©r√©`);
          }
          
          // R√©f√©rence √† la fonction de g√©n√©ration de ticket
          const generateAndSendTicket = require('./index').generateAndSendTicket;

          // Envoyer les tickets si le paiement est valid√©
          if (session.step === 'paid' && session.generatedTickets && session.generatedTickets.length > 0) {
            console.log(`[Bot] Envoi de ${session.generatedTickets.length} tickets √† l'utilisateur ${fullName} (ID: ${userId})`);

            
            // Envoi de tous les tickets g√©n√©r√©s
            for (const ticket of session.generatedTickets) {
              try {
                console.log(`[Bot] Envoi du ticket #${ticket.ticketNumber} avec QR code ${ticket.qrCode}`);
                
                generateAndSendTicket({
                  to: chatId,
                  channel: 'telegram',
                  eventName: ticket.eventName,
                  category: ticket.categoryName,
                  reservationId: ticket.id,
                  price: ticket.price,
                  formattedId: ticket.formattedId,
                  qrCode: ticket.qrCode
                });
                
                // Petite pause entre chaque envoi pour √©viter les limitations API
                await new Promise(resolve => setTimeout(resolve, 1000));
              } catch (sendError) {
                console.error(`[Bot] Erreur lors de l'envoi du ticket ${ticket.id}:`, sendError);
              }
            }

            // Envoyer un message de confirmation
            const keyboard = {
              inline_keyboard: [
                [{ text: 'üìã Mes tickets', callback_data: 'my_tickets' }],
                [{ text: 'üéüÔ∏è Acheter plus de tickets', callback_data: 'start_purchase' }]
              ]
            };
            
            await telegramBot.sendMessage(
              chatId,
              `üéâ Vos tickets ont √©t√© g√©n√©r√©s avec succ√®s !\n\n` +
              `üí≥ R√©f√©rence de commande : ${session.orderReference}\n` +
              `üéüÔ∏è Nombre de tickets : ${session.generatedTickets.length}\n` +
              `üîî Chaque ticket a un code QR unique pour l'acc√®s`,
              { reply_markup: keyboard }
            );

            // Nettoyer la session
            paymentSessions.delete(userId);
          } else {
            // Si on arrive ici, on n'a pas g√©n√©r√© de tickets car le paiement n'est pas valid√©
            console.log('DEBUG: Pas de g√©n√©ration de tickets - paiement non valid√©', { session });
            await telegramBot.sendMessage(chatId, 'Les tickets seront g√©n√©r√©s une fois le paiement valid√©.');
          }
          
        } else if (paymentStatus.status === 'pending') {
          // Paiement en attente
          const keyboard = {
            inline_keyboard: [
              [{
                text: 'V√©rifier √† nouveau',
                callback_data: `check_payment:${reference}`
              }],
              [{
                text: 'Annuler',
                callback_data: 'cancel_purchase'
              }]
            ]
          };
          
          await telegramBot.sendMessage(
            chatId,
            `Votre paiement est en cours de traitement.\n` +
            `Statut actuel : ${paymentStatus.status_description}\n` +
            `Veuillez r√©essayer dans quelques instants.`,
            { reply_markup: keyboard }
          );
        } else {
          // Paiement √©chou√© ou autre statut
          const keyboard = {
            inline_keyboard: [
              [{
                text: 'R√©essayer le paiement',
                url: session.paymentUrl
              }],
              [{
                text: 'V√©rifier √† nouveau',
                callback_data: `check_payment:${reference}`
              }],
              [{
                text: 'Annuler',
                callback_data: 'cancel_purchase'
              }]
            ]
          };
          
          await telegramBot.sendMessage(
            chatId,
            `Votre paiement n'a pas √©t√© confirm√©.\n` +
            `Statut : ${paymentStatus.status_description}\n` +
            `Erreur : ${paymentStatus.error_message || 'Aucune erreur sp√©cifi√©e'}\n\n` +
            `Vous pouvez r√©essayer le paiement ou annuler votre commande.`,
            { reply_markup: keyboard }
          );
        }
      } catch (error) {
        console.error('Erreur lors de la g√©n√©ration et envoi des tickets :', error);
        telegramBot.sendMessage(chatId, 'Une erreur est survenue lors de la g√©n√©ration des tickets. Veuillez contacter le support.');
      }
    }
    
    // Annulation de l'achat
    else if (data === 'cancel_purchase') {
      // Supprimer la session de paiement
      paymentSessions.delete(userId);
      
      await telegramBot.sendMessage(chatId, 'Votre commande a √©t√© annul√©e. Vous pouvez d√©marrer un nouvel achat avec la commande /acheter');
    }
    
    // Nouveaux boutons
    else if (data === 'start_purchase') {
      // V√©rifier si l'utilisateur a d√©j√† une session de paiement en cours
      if (paymentSessions.has(userId)) {
        return telegramBot.sendMessage(chatId, 'Vous avez d√©j√† une session d\'achat en cours. Veuillez la terminer ou l\'annuler avant d\'en d√©marrer une nouvelle.');
      }

      // R√©cup√©rer les √©v√©nements disponibles depuis la base de donn√©es
      const Database = require('better-sqlite3');
      const db = new Database(__dirname + '/data.sqlite');
      
      const events = db.prepare(`
        SELECT * FROM events 
        WHERE active = 1 
        ORDER BY date
      `).all();

      if (!events || events.length === 0) {
        return telegramBot.sendMessage(chatId, 'Aucun √©v√©nement disponible pour le moment.');
      }

      // Cr√©er les boutons pour les √©v√©nements
      const keyboard = {
        inline_keyboard: []
      };

      events.forEach(event => {
        keyboard.inline_keyboard.push([{
          text: event.name,
          callback_data: `select_event:${event.id}`
        }]);
      });

      // Ajouter un bouton d'annulation
      keyboard.inline_keyboard.push([{
        text: 'Annuler',
        callback_data: 'cancel_purchase'
      }]);

      await telegramBot.sendMessage(chatId, 'Veuillez s√©lectionner un √©v√©nement :', {
        reply_markup: keyboard
      });

      // Initialiser une session de paiement
      paymentSessions.set(userId, { step: 'select_event' });
    }
    else if (data === 'my_tickets') {
      const fullName = callbackQuery.from.first_name + (callbackQuery.from.last_name ? ' ' + callbackQuery.from.last_name : '');
      const username = callbackQuery.from.username || '';
      try {
        const Database = require('better-sqlite3');
        const db = new Database(__dirname + '/data.sqlite');
        
        // R√©cup√©rer toutes les commandes (groups de tickets) de l'utilisateur
        const orders = db.prepare(`
          SELECT order_reference, event_name, category_name, unit_price, date, COUNT(*) as ticket_count
          FROM reservations 
          WHERE purchase_channel = 'telegram' AND phone = ? 
          GROUP BY order_reference
          ORDER BY date DESC
        `).all(username);
        
        if (!orders || orders.length === 0) {
          return telegramBot.sendMessage(chatId, 'Vous n\'avez pas encore achet√© de tickets.');
        }
        
        // Envoyer un message avec la liste des commandes et tickets
        let message = `üìã *Vos tickets achet√©s*\n\n`;
        
        orders.forEach((order, index) => {
          const date = new Date(order.date);
          const formattedDate = date.toLocaleDateString('fr-FR');
          
          message += `*Commande ${index + 1}* - ${formattedDate}\n`;
          message += `üé≠ √âv√©nement: *${order.event_name}*\n`;
          message += `üéüÔ∏è Cat√©gorie: ${order.category_name}\n`;
          message += `üî¢ Nombre de tickets: ${order.ticket_count}\n`;
          message += `üí∞ Prix total: ${order.unit_price * order.ticket_count} GNF\n`;
          message += `üÜî R√©f√©rence: ${order.order_reference}\n\n`;
        });
        
        message += 'Pour voir vos tickets, utilisez /tickets suivi du num√©ro de commande.';
        
        // Ajouter des boutons pour visualiser les commandes
        const keyboard = {
          inline_keyboard: []
        };
        
        // Ajouter un bouton pour chaque commande (limit√© √† 5 pour √©viter de d√©passer la limite de boutons)
        const maxButtons = Math.min(orders.length, 5);
        for (let i = 0; i < maxButtons; i++) {
          keyboard.inline_keyboard.push([{
            text: `Voir tickets commande ${i+1}`,
            callback_data: `view_order:${i+1}`
          }]);
        }
        
        // Ajouter un bouton pour retourner au menu principal
        keyboard.inline_keyboard.push([{
          text: 'üé≠ Acheter des tickets',
          callback_data: 'start_purchase'
        }]);
        
        telegramBot.sendMessage(chatId, message, { parse_mode: 'Markdown', reply_markup: keyboard });
        
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des tickets :', error);
        telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
      }
    }
    else if (data === 'help') {
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üéüÔ∏è Acheter des tickets', callback_data: 'start_purchase' }],
          [{ text: 'üìã Mes tickets', callback_data: 'my_tickets' }],
          [{ text: 'üè† Retour au menu', callback_data: 'main_menu' }]
        ]
      };
      telegramBot.sendMessage(chatId, `Voici comment utiliser le service d'achat de tickets :

Pour acheter un ticket :
1. S√©lectionnez un √©v√©nement
2. Choisissez une cat√©gorie de ticket
3. S√©lectionnez la quantit√©
4. Proc√©dez au paiement via ChapChap Pay
5. V√©rifiez le statut du paiement
6. Recevez vos tickets !

Choisissez une option ci-dessous:`, { reply_markup: keyboard });
    }
    else if (data === 'main_menu') {
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üéüÔ∏è Acheter des tickets', callback_data: 'start_purchase' }],
          [{ text: 'üìã Mes tickets', callback_data: 'my_tickets' }],
          [{ text: '‚ùì Aide', callback_data: 'help' }]
        ]
      };
      telegramBot.sendMessage(chatId, `Retour au menu principal. Choisissez une option ci-dessous:`, { reply_markup: keyboard });
    }
    
    // Gestionnaire pour visualiser les tickets d'une commande
    else if (data.startsWith('view_order:')) {
      const orderIndex = parseInt(data.split(':')[1], 10) - 1; // Convertir en index bas√© sur 0
      const username = callbackQuery.from.username || '';
      
      try {
        const Database = require('better-sqlite3');
        const db = new Database(__dirname + '/data.sqlite');
        
        // R√©cup√©rer toutes les commandes de l'utilisateur
        const orders = db.prepare(`
          SELECT order_reference, event_name, category_name, date
          FROM reservations 
          WHERE purchase_channel = 'telegram' AND phone = ? 
          GROUP BY order_reference
          ORDER BY date DESC
        `).all(username);
        
        if (!orders || orderIndex >= orders.length) {
          return telegramBot.sendMessage(chatId, 'Commande introuvable.');
        }
        
        const selectedOrder = orders[orderIndex];
        
        // R√©cup√©rer tous les tickets de cette commande
        const tickets = db.prepare(`
          SELECT id, formatted_id, qr_code, unit_price
          FROM reservations
          WHERE order_reference = ?
          ORDER BY formatted_id
        `).all(selectedOrder.order_reference);
        
        if (!tickets || tickets.length === 0) {
          return telegramBot.sendMessage(chatId, 'Aucun ticket trouv√© pour cette commande.');
        }
        
        // Afficher les d√©tails de la commande et de ses tickets
        let message = `üéüÔ∏è *D√©tails de la commande*\n\n`;
        message += `üé≠ √âv√©nement: *${selectedOrder.event_name}*\n`;
        message += `üéüÔ∏è Cat√©gorie: ${selectedOrder.category_name}\n`;
        message += `üî¢ Nombre de tickets: ${tickets.length}\n`;
        message += `üÜî R√©f√©rence: ${selectedOrder.order_reference}\n\n`;
        message += `*Liste des tickets:*\n`;
        
        tickets.forEach((ticket, index) => {
          message += `${index + 1}. Ticket ${ticket.formatted_id}\n`;
          message += `   Code QR: ${ticket.qr_code}\n`;
          message += `   Prix: ${ticket.unit_price} GNF\n\n`;
        });
        
        // Ajouter un bouton pour retourner √† la liste des commandes
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üîô Retour aux commandes', callback_data: 'my_tickets' }],
            [{ text: 'üé≠ Acheter plus de tickets', callback_data: 'start_purchase' }]
          ]
        };
        
        await telegramBot.sendMessage(chatId, message, { parse_mode: 'Markdown', reply_markup: keyboard });
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des tickets :', error);
        telegramBot.sendMessage(chatId, 'Une erreur est survenue lors de la r√©cup√©ration des tickets. Veuillez r√©essayer.');
      }
    }
    
  } catch (error) {
    console.error('Erreur lors du traitement du callback :', error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
  }
});

// Exposer des fonctions pour permettre la gestion des sessions de paiement depuis l'ext√©rieur

// Cr√©ation d'une session de paiement depuis l'ext√©rieur (ex: index.js)
telegramBot.createPaymentSession = function(userId, sessionData) {
  console.log('Creation directe d\'une session depuis l\'ext√©rieur', { userId, sessionData });
  paymentSessions.set(userId, sessionData);
  return true;
};

// Autres fonctions d'acc√®s aux sessions
telegramBot.getPaymentSession = function(userId) {
  return paymentSessions.get(userId);
};

telegramBot.deletePaymentSession = function(userId) {
  return paymentSessions.delete(userId);
};

telegramBot.hasPaymentSession = function(userId) {
  return paymentSessions.has(userId);
};

module.exports = telegramBot;
