// =============================
// INITIALISATION DU BOT TELEGRAM
// =============================
const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

// Importation du service ChapChap Pay
const chapchapPay = require('./services/chapchap-pay');

// polling: true => le bot √©coute les messages entrants (mode d√©veloppement ou prod unique)
const telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true }); // polling activ√© pour recevoir les messages

// Stockage des sessions de paiement temporaires
const paymentSessions = new Map();

// =============================
// COMMANDES DU BOT
// =============================

// Commande /start - Message de bienvenue
telegramBot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  telegramBot.sendMessage(chatId, `Bienvenue ${msg.from.first_name} sur le service d'achat de tickets !
  
Utilisez les commandes suivantes :
- /acheter - Acheter des tickets pour un √©v√©nement
- /mestickets - Voir vos tickets achet√©s
- /aide - Obtenir de l'aide`);
});

// Commande /aide - Affiche l'aide
telegramBot.onText(/\/aide/, (msg) => {
  const chatId = msg.chat.id;
  telegramBot.sendMessage(chatId, `Voici la liste des commandes disponibles :

- /acheter - D√©marrer le processus d'achat de tickets
- /mestickets - Afficher les tickets que vous avez achet√©s
- /aide - Afficher ce message d'aide

Pour acheter un ticket :
1. Utilisez la commande /acheter
2. S√©lectionnez un √©v√©nement
3. Choisissez une cat√©gorie de ticket
4. S√©lectionnez la quantit√©
5. Proc√©dez au paiement via ChapChap Pay
6. V√©rifiez le statut du paiement
7. Recevez vos tickets !`);
});

// Commande /acheter - D√©marre le processus d'achat de tickets
telegramBot.onText(/\/acheter/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    // V√©rifier si l'utilisateur a d√©j√† une session de paiement en cours
    if (paymentSessions.has(userId)) {
      return telegramBot.sendMessage(chatId, 'Vous avez d√©j√† une session d\'achat en cours. Veuillez la terminer ou l\'annuler avant d\'en d√©marrer une nouvelle.');
    }

    // R√©cup√©rer les √©v√©nements disponibles depuis la base de donn√©es
    const Database = require('better-sqlite3');
    const db = new Database(__dirname + '/data.sqlite');
    
    const events = db.prepare(`
      SELECT * FROM events 
      WHERE active = 1 
      ORDER BY date
    `).all();

    if (!events || events.length === 0) {
      return telegramBot.sendMessage(chatId, 'Aucun √©v√©nement disponible pour le moment.');
    }

    // Cr√©er les boutons pour les √©v√©nements
    const keyboard = {
      inline_keyboard: []
    };

    events.forEach(event => {
      keyboard.inline_keyboard.push([{
        text: event.name,
        callback_data: `select_event:${event.id}`
      }]);
    });

    // Ajouter un bouton d'annulation
    keyboard.inline_keyboard.push([{
      text: 'Annuler',
      callback_data: 'cancel_purchase'
    }]);

    await telegramBot.sendMessage(chatId, 'Veuillez s√©lectionner un √©v√©nement :', {
      reply_markup: keyboard
    });

    // Initialiser une session de paiement
    paymentSessions.set(userId, { step: 'select_event' });

  } catch (error) {
    console.error('Erreur lors de l\'initialisation de l\'achat :', error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
  }
});

// Commande /mestickets - Affiche les tickets de l'utilisateur
telegramBot.onText(/\/mestickets/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || '';
  
  try {
    const Database = require('better-sqlite3');
    const db = new Database(__dirname + '/data.sqlite');
    
    // R√©cup√©rer les r√©servations de l'utilisateur (via l'ID Telegram ou le username)
    const reservations = db.prepare(`
      SELECT * FROM reservations 
      WHERE (purchase_channel = 'telegram' AND phone = ?) 
      ORDER BY created_at DESC
    `).all(username);
    
    if (!reservations || reservations.length === 0) {
      return telegramBot.sendMessage(chatId, 'Vous n\'avez pas encore achet√© de tickets.');
    }
    
    // Envoyer un message avec la liste des tickets
    let message = 'Voici vos tickets achet√©s :\n\n';
    
    reservations.forEach((reservation, index) => {
      message += `${index + 1}. ${reservation.event_name} - ${reservation.category_name}\n`;
      message += `   Quantit√©: ${reservation.quantity}\n`;
      message += `   Prix: ${reservation.total_price} GNF\n`;
      message += `   R√©f√©rence: ${reservation.formatted_id}\n\n`;
    });
    
    message += 'Pour voir le d√©tail d\'un ticket, utilisez /ticket suivi du num√©ro de la liste.';
    
    telegramBot.sendMessage(chatId, message);
    
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des tickets :', error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
  }
});

// Commande /ticket - Affiche un ticket sp√©cifique
telegramBot.onText(/\/ticket ([0-9]+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || '';
  const ticketIndex = parseInt(match[1]) - 1;
  
  try {
    const Database = require('better-sqlite3');
    const db = new Database(__dirname + '/data.sqlite');
    
    // R√©cup√©rer les r√©servations de l'utilisateur
    const reservations = db.prepare(`
      SELECT * FROM reservations 
      WHERE (purchase_channel = 'telegram' AND phone = ?) 
      ORDER BY date DESC
    `).all(username);
    
    if (!reservations || reservations.length === 0 || ticketIndex < 0 || ticketIndex >= reservations.length) {
      return telegramBot.sendMessage(chatId, 'Ticket non trouv√©. Veuillez v√©rifier le num√©ro du ticket.');
    }
    
    const reservation = reservations[ticketIndex];
    
    // G√©n√©rer le ticket image
    // Note: cette partie d√©pend de l'impl√©mentation de votre fonction generateAndSendTicket
    const generateAndSendTicket = require('./index').generateAndSendTicket;
    
    generateAndSendTicket({
      to: chatId,
      channel: 'telegram',
      eventName: reservation.event_name,
      category: reservation.category_name,
      reservationId: reservation.id,
      price: reservation.unit_price,
      formattedId: reservation.formatted_id,
      qrCode: reservation.qr_code
    });
    
  } catch (error) {
    console.error('Erreur lors de l\'affichage du ticket :', error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
  }
});

// =============================
// HANDLER TEXTE : R√âPONSE "OUI" (fallback si l'utilisateur tape au lieu de cliquer)
// =============================
telegramBot.on('message', async (msg) => {
  // Ignorer les commandes commen√ßant par '/'
  if (!msg.text || msg.text.startsWith('/')) return;
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text.trim().toLowerCase();

  // V√©rifier si l'utilisateur tape "oui", "ok" ou autre confirmation alors qu'il devrait cliquer sur le bouton
  if (text === 'oui' || text === 'oui, confirmer' || text === 'yes' || text === 'ok' || text === 'Ok') {
    if (!paymentSessions.has(userId)) return; // Aucune session
    const session = paymentSessions.get(userId);

    // Seuls les √©tats en cours de cr√©ation de paiement sont accept√©s
    if (session.step !== 'payment_creation') return;

    console.log('DEBUG: R√©ponse texte "oui" d√©tect√©e, g√©n√©ration du lien de paiement ...', { session });

    // Reproduire la logique du callback confirm_purchase
    try {
      const Database = require('better-sqlite3');
      const db = new Database(__dirname + '/data.sqlite');

      // V√©rifier la disponibilit√© des places
      const eventInfo = db.prepare('SELECT available_seats FROM events WHERE id = ?').get(session.event.id);
      if (eventInfo && typeof eventInfo.available_seats === 'number' && eventInfo.available_seats < session.quantity) {
        return telegramBot.sendMessage(chatId, `D√©sol√©, il ne reste que ${eventInfo.available_seats} place(s) disponible(s) pour cet √©v√©nement.`);
      }

      // G√©n√©rer une r√©f√©rence unique pour ce paiement
      const reference = chapchapPay.generateTransactionId();
      session.reference = reference;

      // G√©n√©rer le lien de paiement
      const paymentData = {
        amount: session.totalPrice,
        description: `Achat de ${session.quantity} ticket(s) pour ${session.event.name} - ${session.category.name}`,
        reference
      };

      const paymentResponse = await chapchapPay.generatePaymentLink(paymentData);

      // Mettre √† jour la session
      session.paymentUrl = paymentResponse.payment_url;
      session.step = 'payment_pending';
      paymentSessions.set(userId, session);

      // Envoyer le lien de paiement
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí≥ Payer maintenant', url: paymentResponse.payment_url }],
          [{ text: 'üîÑ V√©rifier le paiement', callback_data: `check_payment:${reference}` }],
          [{ text: '‚ùå Annuler', callback_data: 'cancel_purchase' }]
        ]
      };

      await telegramBot.sendMessage(
        chatId,
        `üí∏ Votre lien de paiement est pr√™t !\n\n` +
        `üí∞ Montant : ${paymentResponse.payment_amount_formatted}\n` +
        `üÜî R√©f√©rence : ${reference}\n\n` +
        `‚≠ê Cliquez sur "Payer maintenant" pour proc√©der au paiement.\n` +
        `‚ùï Apr√®s paiement, cliquez sur "V√©rifier le paiement" pour g√©n√©rer vos tickets.`,
        { reply_markup: keyboard }
      );
    } catch (e) {
      console.error('Erreur lors de la g√©n√©ration du lien de paiement (r√©ponse texte oui) :', e);
      telegramBot.sendMessage(chatId, 'Une erreur est survenue lors de la g√©n√©ration du lien de paiement. Veuillez r√©essayer plus tard.');
    }
  }
});

// =============================
// CALLBACKS POUR LES BOUTONS INLINE
// =============================

// Callback pour la s√©lection d'un √©v√©nement
telegramBot.on('callback_query', async (callbackQuery) => {
  const data = callbackQuery.data;
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const userId = callbackQuery.from.id;
  
  // DEBUG: Afficher les donn√©es du callback
  console.log('=== TELEGRAM CALLBACK DEBUG ===');
  console.log('Callback data re√ßue:', data);
  console.log('User ID:', userId, 'Chat ID:', chatId);
  console.log('Session existante:', paymentSessions.has(userId));
  if (paymentSessions.has(userId)) {
    const session = paymentSessions.get(userId);
    console.log('Session step:', session.step);
  }
  
  // Acquitter le callback query pour √©viter le chargement infini
  telegramBot.answerCallbackQuery(callbackQuery.id);
  
  try {
    // S√©lection d'un √©v√©nement
    if (data.startsWith('select_event:')) {
      const eventId = data.split(':')[1];
      
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      // R√©cup√©rer les informations de l'√©v√©nement
      const Database = require('better-sqlite3');
      const db = new Database(__dirname + '/data.sqlite');
      
      const event = db.prepare('SELECT * FROM events WHERE id = ?').get(eventId);
      if (!event) {
        return telegramBot.sendMessage(chatId, '√âv√©nement non trouv√©. Veuillez r√©essayer.');
      }
      
      // Mettre √† jour la session avec l'√©v√©nement s√©lectionn√©
      const session = paymentSessions.get(userId);
      session.event = event;
      session.step = 'select_category';
      paymentSessions.set(userId, session);
      
      // R√©cup√©rer les cat√©gories de l'√©v√©nement
      let categories = [];
      try {
        categories = JSON.parse(event.categories || '[]');
      } catch (e) {
        categories = [{ name: 'Standard', price: 5000 }];
      }
      
      // Cr√©er les boutons pour les cat√©gories
      const keyboard = {
        inline_keyboard: []
      };
      
      categories.forEach(category => {
        const price = category.price || category.prix || 0;
        keyboard.inline_keyboard.push([{
          text: `${category.name} - ${price} GNF`,
          callback_data: `select_category:${category.name}:${price}`
        }]);
      });
      
      // Ajouter un bouton d'annulation
      keyboard.inline_keyboard.push([{
        text: 'Annuler',
        callback_data: 'cancel_purchase'
      }]);
      
      await telegramBot.sendMessage(
        chatId,
        `Vous avez s√©lectionn√© : ${event.name}\nVeuillez choisir une cat√©gorie :`,
        { reply_markup: keyboard }
      );
    }
    
    // S√©lection d'une cat√©gorie
    else if (data.startsWith('select_category:')) {
      const parts = data.split(':');
      const categoryName = parts[1];
      const price = parseInt(parts[2]);
      
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      // Mettre √† jour la session avec la cat√©gorie s√©lectionn√©e
      const session = paymentSessions.get(userId);
      session.category = { name: categoryName, price: price };
      session.step = 'select_quantity';
      paymentSessions.set(userId, session);
      
      // Cr√©er les boutons pour les quantit√©s
      const keyboard = {
        inline_keyboard: [
          [1, 2, 3].map(qty => ({
            text: `${qty}`,
            callback_data: `select_quantity:${qty}`
          })),
          [4, 5, 6].map(qty => ({
            text: `${qty}`,
            callback_data: `select_quantity:${qty}`
          })),
          [{
            text: 'Annuler',
            callback_data: 'cancel_purchase'
          }]
        ]
      };
      
      await telegramBot.sendMessage(
        chatId,
        `Cat√©gorie s√©lectionn√©e : ${categoryName} - ${price} GNF\nVeuillez choisir la quantit√© :`,
        { reply_markup: keyboard }
      );
    }
    
    // S√©lection de la quantit√©
    else if (data.startsWith('select_quantity:')) {
      const quantity = parseInt(data.split(':')[1]);
      
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        console.log('ERREUR: Session non trouv√©e pour l\'utilisateur', userId);
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      // Mettre √† jour la session avec la quantit√© s√©lectionn√©e
      const session = paymentSessions.get(userId);
      session.quantity = quantity;
      session.step = 'payment_creation';
      session.totalPrice = session.category.price * quantity;
      paymentSessions.set(userId, session);
      
      // Afficher le r√©capitulatif et demander confirmation avec un bouton "Oui, confirmer"
      const confirmKeyboard = {
        inline_keyboard: [
          [{
            text: 'Oui, confirmer',
            callback_data: 'confirm_purchase'
          }],
          [{
            text: 'Annuler',
            callback_data: 'cancel_purchase'
          }]
        ]
      };
      
      await telegramBot.sendMessage(
        chatId,
        `R√©capitulatif de votre commande :\n` +
        `√âv√©nement : ${session.event.name}\n` +
        `Cat√©gorie : ${session.category.name}\n` +
        `Quantit√© : ${quantity}\n` +
        `Prix unitaire : ${session.category.price} GNF\n` +
        `Prix total : ${session.totalPrice} GNF\n\n` +
        `Cliquez sur "Oui, confirmer" pour proc√©der au paiement.`,
        { reply_markup: confirmKeyboard }
      );
    }
    
    // Confirmer l'achat et g√©n√©rer le lien de paiement
    else if (data === 'confirm_purchase') {
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        console.log('ERREUR: Session non trouv√©e pour l\'utilisateur', userId);
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      const session = paymentSessions.get(userId);
      await telegramBot.sendMessage(chatId, 'G√©n√©ration du lien de paiement en cours...');
      
      // G√©n√©rons le lien de paiement
      try {
        const Database = require('better-sqlite3');
        const db = new Database(__dirname + '/data.sqlite');
        console.log('Connexion √† la base de donn√©es √©tablie');

        // V√©rifier la disponibilit√© des places
        const eventInfo = db.prepare('SELECT available_seats FROM events WHERE id = ?').get(session.event.id);
        if (eventInfo && typeof eventInfo.available_seats === 'number' && eventInfo.available_seats < session.quantity) {
          return telegramBot.sendMessage(chatId, `D√©sol√©, il ne reste que ${eventInfo.available_seats} place(s) disponible(s) pour cet √©v√©nement.`);
        }
      
        // G√©n√©rer une r√©f√©rence unique pour ce paiement
        const reference = chapchapPay.generateTransactionId();
        session.reference = reference;
        console.log('R√©f√©rence g√©n√©r√©e:', reference);
      
        // G√©n√©rer le lien de paiement
        const paymentData = {
          amount: session.totalPrice,
          description: `Achat de ${session.quantity} ticket(s) pour ${session.event.name} - ${session.category.name}`,
          reference: reference
        };
      
        console.log('Donn√©es de paiement pr√™tes:', JSON.stringify(paymentData));
        await telegramBot.sendMessage(chatId, 'G√©n√©ration du lien de paiement en cours...');
      
        console.log('Appel au service chapchapPay.generatePaymentLink...');
        const paymentResponse = await chapchapPay.generatePaymentLink(paymentData);
        console.log('R√©ponse de ChapChap Pay:', JSON.stringify(paymentResponse));
        
        // Stocker les informations de paiement dans la session
        session.paymentUrl = paymentResponse.payment_url;
        session.step = 'payment_pending';
        paymentSessions.set(userId, session);
        
        // Envoyer le lien de paiement
        const keyboard = {
          inline_keyboard: [
            [{
              text: 'üí≥ Payer maintenant',
              url: paymentResponse.payment_url
            }],
            [{
              text: 'üîÑ V√©rifier le paiement',
              callback_data: `check_payment:${reference}`
            }],
            [{
              text: '‚ùå Annuler',
              callback_data: 'cancel_purchase'
            }]
          ]
        };
        
        await telegramBot.sendMessage(
          chatId,
          `üí∏ Votre lien de paiement est pr√™t !\n\n` +
          `üí∞ Montant : ${paymentResponse.payment_amount_formatted}\n` +
          `üÜî R√©f√©rence : ${reference}\n\n` +
          `‚≠ê Cliquez sur "Payer maintenant" pour proc√©der au paiement.\n` +
          `‚ùï Apr√®s paiement, cliquez sur "V√©rifier le paiement" pour g√©n√©rer vos tickets.`,
          { reply_markup: keyboard }
        );
      } catch (error) {
        console.error('Erreur lors de la g√©n√©ration du lien de paiement:', error);
        telegramBot.sendMessage(chatId, 'Une erreur est survenue lors de la g√©n√©ration du lien de paiement. Veuillez r√©essayer plus tard.');
      }
    }
    
    // V√©rification du paiement
    else if (data.startsWith('check_payment:')) {
      console.log('=== D√âBUT V√âRIFICATION DE PAIEMENT ===');
      const reference = data.split(':')[1];
      console.log('R√©f√©rence de paiement:', reference);
      
      // V√©rifier si l'utilisateur a une session active
      if (!paymentSessions.has(userId)) {
        console.log('ERREUR: Session non trouv√©e pour l\'utilisateur', userId);
        return telegramBot.sendMessage(chatId, 'Votre session a expir√©. Veuillez recommencer l\'achat.');
      }
      
      const session = paymentSessions.get(userId);
      console.log('Session active trouv√©e:', JSON.stringify(session));
      
      // V√©rifier que la r√©f√©rence correspond √† celle de la session
      if (session.reference !== reference) {
        console.log('ERREUR: R√©f√©rence de paiement ne correspond pas:', session.reference, '!=', reference);
        return telegramBot.sendMessage(chatId, 'R√©f√©rence de paiement invalide. Veuillez r√©essayer.');
      }

      // Emp√™cher toute g√©n√©ration de ticket si la session n'est pas en attente de paiement
      if (session.step !== 'payment_pending') {
        console.log('Tentative de g√©n√©ration de ticket sans √©tape payment_pending. Session:', JSON.stringify(session));
        return telegramBot.sendMessage(chatId, "Vous devez d'abord effectuer le paiement avant de recevoir vos tickets.");
      }

      await telegramBot.sendMessage(chatId, 'V√©rification du statut de votre paiement...');

      try {
        console.log('Appel au service chapchapPay.checkPaymentStatus avec r√©f√©rence:', reference);
        // V√©rifier le statut du paiement
        const paymentStatus = await chapchapPay.checkPaymentStatus(reference);
        console.log('R√©ponse du statut de paiement:', JSON.stringify(paymentStatus));
        
        // Initier la connexion √† la base de donn√©es
        const Database = require('better-sqlite3');
        const db = new Database(__dirname + '/data.sqlite');
        console.log('Connexion √† la base de donn√©es √©tablie');
        
        // V√©rifier que le paiement est valid√© avant de g√©n√©rer les tickets
        if (paymentStatus.status !== 'success' && paymentStatus.status !== 'completed' && paymentStatus.status !== 'paid') {
          // Paiement non valid√©
          await telegramBot.sendMessage(
            chatId,
            `Votre paiement est en cours de traitement.\n` +
            `Statut actuel : ${paymentStatus.status_description || paymentStatus.status}\n` +
            `Veuillez r√©essayer dans quelques instants.`
          );
          return;
        }
        
        // Mettre √† jour l'√©tat de la session pour √©viter tout double envoi
        session.step = 'paid';
        paymentSessions.set(userId, session);
        console.log('Paiement confirm√© avec le statut:', paymentStatus.status);
        
        // R√©cup√©rer l'√©v√©nement avec les donn√©es actuelles
        const event = db.prepare('SELECT * FROM events WHERE id = ?').get(session.event.id);
        if (!event) {
          throw new Error(`√âv√©nement avec l'ID ${session.event.id} introuvable`);
        }
        
        // Mise √† jour du nombre total de places disponibles
        if (typeof event.available_seats === 'number') {
          const newAvailableSeats = Math.max(0, event.available_seats - session.quantity);
          db.prepare('UPDATE events SET available_seats = ? WHERE id = ?').run(newAvailableSeats, session.event.id);
          console.log(`[Bot] Nombre total de places mis √† jour pour l'√©v√©nement #${session.event.id}: ${event.available_seats} -> ${newAvailableSeats}`);
        }
        
        // Mise √† jour de la quantit√© sp√©cifique √† la cat√©gorie
        const categoriesStr = event.categories;
        if (categoriesStr) {
          // Paiement r√©ussi, proc√©der √† la cr√©ation des tickets
          await telegramBot.sendMessage(chatId, 'Paiement confirm√© ! G√©n√©ration de vos tickets en cours...');
          
          // Cr√©er la r√©servation dans la base de donn√©es
          const username = callbackQuery.from.username || '';
          const fullName = callbackQuery.from.first_name + ' ' + (callbackQuery.from.last_name || '');
          
          // Ins√©rer la r√©servation avec statut de paiement
          // V√©rifier si les colonnes de paiement existent dans la table
          let insertResult;
          try {
            // V√©rifier si les colonnes payment_reference et payment_status existent
            const columns = db.prepare("PRAGMA table_info(reservations)").all();
            const hasPaymentColumns = columns.some(col => col.name === 'payment_reference') && 
                                       columns.some(col => col.name === 'payment_status');
            
            console.log('Colonnes de paiement disponibles:', hasPaymentColumns);
            
            // G√©n√©rer la date actuelle pour la r√©servation
            const currentDate = new Date().toISOString().split('T')[0]; // Format YYYY-MM-DD
            
            // G√©n√©rer un code QR unique √† 7 chiffres pour le ticket principal
            const qrCode = chapchapPay.generateQRCode();
            console.log(`[Bot] Nouveau QR code g√©n√©r√© pour le ticket principal : ${qrCode}`);

            if (hasPaymentColumns) {
              // Version avec colonnes de paiement
              insertResult = db.prepare(`
                INSERT INTO reservations 
                (user, phone, event_id, event_name, category_name, quantity, unit_price, total_price, purchase_channel, formatted_id, qr_code, payment_reference, payment_status, date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
              `).run(
                fullName,
                username,
                session.event.id,
                session.event.name,
                session.category.name,
                session.quantity,
                session.category.price,
                session.totalPrice,
                'telegram',
                reference,
                qrCode,    // Utiliser un code QR unique √† 7 chiffres au lieu de la r√©f√©rence
                reference,
                'paid',
                currentDate
              );
            } else {
              // Version sans colonnes de paiement
              insertResult = db.prepare(`
                INSERT INTO reservations 
                (user, phone, event_id, event_name, category_name, quantity, unit_price, total_price, purchase_channel, formatted_id, qr_code, date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
              `).run(
                fullName,
                username,
                session.event.id,
                session.event.name,
                session.category.name,
                session.quantity,
                session.category.price,
                session.totalPrice,
                'telegram',
                reference,
                qrCode,    // Utiliser un code QR unique √† 7 chiffres au lieu de la r√©f√©rence
                currentDate
              );
            }
          } catch (sqlError) {
            console.error('Erreur SQL lors de l\'insertion de la r√©servation:', sqlError);
            // Fallback avec une version minimale sans v√©rification de colonnes
            const currentDate = new Date().toISOString().split('T')[0]; // Format YYYY-MM-DD
            insertResult = db.prepare(`
              INSERT INTO reservations 
              (user, phone, event_id, event_name, category_name, quantity, unit_price, total_price, date)
              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            `).run(
              fullName,
              username,
              session.event.id,
              session.event.name,
              session.category.name,
              session.quantity,
              session.category.price,
              session.totalPrice,
              currentDate // Ajouter le param√®tre manquant pour la date
            );
          }
          
          // Mettre √† jour le nombre de places disponibles (total et par cat√©gorie)
          try {
            // R√©cup√©rer l'√©v√©nement avec les donn√©es actuelles
            const event = db.prepare('SELECT * FROM events WHERE id = ?').get(session.event.id);
            if (!event) {
              throw new Error(`√âv√©nement avec l'ID ${session.event.id} introuvable`);
            }
            
            // Mise √† jour du nombre total de places disponibles
            if (typeof event.available_seats === 'number') {
              const newAvailableSeats = Math.max(0, event.available_seats - session.quantity);
              db.prepare('UPDATE events SET available_seats = ? WHERE id = ?').run(newAvailableSeats, session.event.id);
              console.log(`[Bot] Nombre total de places mis √† jour pour l'√©v√©nement #${session.event.id}: ${event.available_seats} -> ${newAvailableSeats}`);
            }
            
            // Mise √† jour de la quantit√© sp√©cifique √† la cat√©gorie
            const categoriesStr = event.categories;
            if (categoriesStr) {
              try {
                let categories = JSON.parse(categoriesStr);
                const categoryIndex = categories.findIndex(cat => cat.name === session.category.name);
                
                if (categoryIndex !== -1) {
                  const cat = categories[categoryIndex];
                  const qtyBefore = cat.quantite !== undefined ? cat.quantite : (cat.quantity !== undefined ? cat.quantity : 0);
                  
                  // Mise √† jour de la quantit√© (gestion des deux noms de propri√©t√© possibles: quantite ou quantity)
                  if (cat.quantite !== undefined) {
                    cat.quantite = Math.max(0, cat.quantite - session.quantity);
                    console.log(`[Bot] Quantit√© ('quantite') mise √† jour pour ${cat.name}: ${qtyBefore} -> ${cat.quantite}`);
                  } else if (cat.quantity !== undefined) {
                    cat.quantity = Math.max(0, cat.quantity - session.quantity);
                    console.log(`[Bot] Quantit√© ('quantity') mise √† jour pour ${cat.name}: ${qtyBefore} -> ${cat.quantity}`);
                  }
                  
                  // Sauvegarder les cat√©gories mises √† jour
                  const updateResult = db.prepare('UPDATE events SET categories = ? WHERE id = ?').run(JSON.stringify(categories), session.event.id);
                  console.log(`[Bot] Cat√©gorie mise √† jour pour l'√©v√©nement #${session.event.id}:`, { updateResult });
                } else {
                  console.error(`[Bot] Cat√©gorie ${session.category.name} introuvable dans l'√©v√©nement #${session.event.id}`);
                }
              } catch (jsonError) {
                console.error('Erreur lors du traitement JSON des cat√©gories:', jsonError);
              }
            } else {
              console.error(`[Bot] Aucune cat√©gorie trouv√©e pour l'√©v√©nement #${session.event.id}`);
            }
          } catch (updateError) {
            console.error('Erreur lors de la mise √† jour des places disponibles:', updateError);
          }
          
          // Ajouter un identifiant de groupe pour cette r√©servation (pour lier tous les tickets ensemble)
          const groupId = chapchapPay.generateTransactionId();
          console.log(`[Bot] ID de groupe g√©n√©r√© pour la r√©servation : ${groupId}`);
          
          // G√©n√©rer les tickets suppl√©mentaires directement dans la table reservations
          if (session.quantity > 1) {
            // G√©n√©rer les tickets suppl√©mentaires dans la m√™me table que le ticket principal
            for (let i = 1; i < session.quantity; i++) {
              // G√©n√©rer un nouveau code QR unique pour chaque ticket suppl√©mentaire
              const additionalQRCode = chapchapPay.generateQRCode();
              console.log(`[Bot] Nouveau QR code g√©n√©r√© pour le ticket suppl√©mentaire #${i+1} : ${additionalQRCode}`);
              
              // Ins√©rer chaque ticket suppl√©mentaire comme une entr√©e compl√®te dans la table reservations
              try {
                const insertAdditionalResult = db.prepare(`
                  INSERT INTO reservations 
                  (user, phone, event_id, event_name, category_name, quantity, unit_price, total_price, purchase_channel, formatted_id, qr_code, parent_reference, ticket_number, date)
                  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                `).run(
                  fullName,
                  username,
                  session.event.id,
                  session.event.name,
                  session.category.name,
                  1, // Quantit√© toujours 1 car c'est un ticket individuel
                  session.category.price,
                  session.category.price, // Prix total = prix unitaire pour un seul ticket
                  'telegram',
                  `${reference}-${i+1}`, // ID format√© unique pour ce ticket
                  additionalQRCode, // QR code unique √† 7 chiffres pour ce ticket
                  reference, // R√©f√©rence au ticket principal
                  i+1, // Num√©ro de ticket dans le groupe
                  currentDate
                );
                console.log(`[Bot] Ticket suppl√©mentaire #${i+1} ins√©r√© avec succ√®s:`, insertAdditionalResult.lastInsertRowid);
              } catch (additionalTicketError) {
                console.error(`[Bot] Erreur lors de l'insertion du ticket suppl√©mentaire #${i+1}:`, additionalTicketError);
              }
            }
          }
          
          // G√©n√©rer et envoyer le ticket principal
          const generateAndSendTicket = require('./index').generateAndSendTicket;

          // LOG: trace d'appel de la g√©n√©ration du ticket principal
          console.log('DEBUG: Tentative de g√©n√©ration du ticket principal', {
            session,
            insertResult,
            reference,
            paymentStatus
          });

          // V√©rification suppl√©mentaire pour √©viter le double envoi
          if (session.step === 'paid') {
            console.log('DEBUG: Envoi effectif du ticket principal √† l\'utilisateur', {
              chatId,
              reservationId: insertResult.lastInsertRowid,
              reference
            });
            
            // G√©n√©rer et envoyer le ticket principal
            generateAndSendTicket({
              to: chatId,
              channel: 'telegram',
              eventName: session.event.name,
              category: session.category.name,
              reservationId: insertResult.lastInsertRowid,
              price: session.category.price,
              formattedId: reference,
              qrCode: reference
            });
            
            // G√©n√©rer et envoyer les tickets suppl√©mentaires, si applicable
            if (session.quantity > 1) {
              try {
                // R√©cup√©rer les tickets suppl√©mentaires de la base de donn√©es
                const additionalTickets = db.prepare(`
                  SELECT * FROM additional_tickets WHERE reservation_id = ? ORDER BY ticket_number
                `).all(insertResult.lastInsertRowid);
                
                console.log(`DEBUG: G√©n√©ration de ${additionalTickets.length} tickets suppl√©mentaires`);
                
                // G√©n√©rer et envoyer chaque ticket suppl√©mentaire
                for (const ticket of additionalTickets) {
                  console.log(`DEBUG: Envoi du ticket suppl√©mentaire n¬∞${ticket.ticket_number}`, ticket);
                  
                  generateAndSendTicket({
                    to: chatId,
                    channel: 'telegram',
                    eventName: session.event.name,
                    category: session.category.name,
                    reservationId: insertResult.lastInsertRowid,
                    price: session.category.price,
                    formattedId: ticket.formatted_id,
                    qrCode: ticket.qr_code
                  });
                  
                  // Petite pause entre chaque envoi pour √©viter les limitations API
                  await new Promise(resolve => setTimeout(resolve, 1000));
                }
              } catch (additionalTicketError) {
                console.error('Erreur lors de la g√©n√©ration des tickets suppl√©mentaires:', additionalTicketError);
              }
            }

            // Envoyer un message de confirmation
            await telegramBot.sendMessage(
              chatId,
              `Vos tickets ont √©t√© g√©n√©r√©s avec succ√®s !\n` +
              `R√©f√©rence de r√©servation : ${reference}\n` +
              `Nombre de tickets : ${session.quantity}\n` +
              `Vous pouvez les consulter et les t√©l√©charger en utilisant la commande /mestickets`
            );

            // Nettoyer la session
            paymentSessions.delete(userId);
          } else {
            // Si on arrive ici, il y a un probl√®me d'√©tat
            console.log('DEBUG: Blocage g√©n√©ration ticket - √©tat session incorrect', { session });
            await telegramBot.sendMessage(chatId, 'Erreur de synchronisation de paiement. Veuillez contacter le support.');
          }
          
        } else if (paymentStatus.status === 'pending') {
          // Paiement en attente
          const keyboard = {
            inline_keyboard: [
              [{
                text: 'V√©rifier √† nouveau',
                callback_data: `check_payment:${reference}`
              }],
              [{
                text: 'Annuler',
                callback_data: 'cancel_purchase'
              }]
            ]
          };
          
          await telegramBot.sendMessage(
            chatId,
            `Votre paiement est en cours de traitement.\n` +
            `Statut actuel : ${paymentStatus.status_description}\n` +
            `Veuillez r√©essayer dans quelques instants.`,
            { reply_markup: keyboard }
          );
        } else {
          // Paiement √©chou√© ou autre statut
          const keyboard = {
            inline_keyboard: [
              [{
                text: 'R√©essayer le paiement',
                url: session.paymentUrl
              }],
              [{
                text: 'V√©rifier √† nouveau',
                callback_data: `check_payment:${reference}`
              }],
              [{
                text: 'Annuler',
                callback_data: 'cancel_purchase'
              }]
            ]
          };
          
          await telegramBot.sendMessage(
            chatId,
            `Votre paiement n'a pas √©t√© confirm√©.\n` +
            `Statut : ${paymentStatus.status_description}\n` +
            `Erreur : ${paymentStatus.error_message || 'Aucune erreur sp√©cifi√©e'}\n\n` +
            `Vous pouvez r√©essayer le paiement ou annuler votre commande.`,
            { reply_markup: keyboard }
          );
        }
      } catch (error) {
        console.error('Erreur lors de la v√©rification du paiement :', error);
        telegramBot.sendMessage(chatId, 'Une erreur est survenue lors de la v√©rification du paiement. Veuillez r√©essayer plus tard.');
      }
    }
    
    // Annulation de l'achat
    else if (data === 'cancel_purchase') {
      // Supprimer la session de paiement
      paymentSessions.delete(userId);
      
      await telegramBot.sendMessage(chatId, 'Votre commande a √©t√© annul√©e. Vous pouvez d√©marrer un nouvel achat avec la commande /acheter');
    }
    
  } catch (error) {
    console.error('Erreur lors du traitement du callback :', error);
    telegramBot.sendMessage(chatId, 'Une erreur est survenue. Veuillez r√©essayer plus tard.');
  }
});

// Exposer des fonctions pour permettre la gestion des sessions de paiement depuis l'ext√©rieur

// Cr√©ation d'une session de paiement depuis l'ext√©rieur (ex: index.js)
telegramBot.createPaymentSession = function(userId, sessionData) {
  console.log('Creation directe d\'une session depuis l\'ext√©rieur', { userId, sessionData });
  paymentSessions.set(userId, sessionData);
  return true;
};

// Autres fonctions d'acc√®s aux sessions
telegramBot.getPaymentSession = function(userId) {
  return paymentSessions.get(userId);
};

telegramBot.deletePaymentSession = function(userId) {
  return paymentSessions.delete(userId);
};

telegramBot.hasPaymentSession = function(userId) {
  return paymentSessions.has(userId);
};

module.exports = telegramBot;
